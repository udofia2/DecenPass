/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "register_user(uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assign_validator(account,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verify_user(uint64,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_stake(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "retrieve_profile(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "penalty_validator(account,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "adjust_validator_reward(account,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGVjZW50X3Bhc3Nfc21hcnRjb250cmFjdC5jb250cmFjdC5EZWNlbnRQYXNzU21hcnRDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "DecentPassSmartContract",
    "methods": [
      {
        "name": "register_user",
        "args": [
          {
            "type": "uint64",
            "name": "user_id"
          },
          {
            "type": "string",
            "name": "profile_data"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Registers a user profile by storing their user ID and profile data in a BoxMap."
      },
      {
        "name": "assign_validator",
        "args": [
          {
            "type": "account",
            "name": "validator"
          },
          {
            "type": "uint64",
            "name": "stake_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Allows a validator to stake tokens and participate in the verification process."
      },
      {
        "name": "verify_user",
        "args": [
          {
            "type": "uint64",
            "name": "user_id"
          },
          {
            "type": "account",
            "name": "validator"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Allows a validator to verify a user profile. Increases the validator's rewards or penalties\nbased on the accuracy of verification, to be handled later."
      },
      {
        "name": "claim_stake",
        "args": [
          {
            "type": "account",
            "name": "validator"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Allows a validator to claim their stake along with accumulated rewards minus penalties."
      },
      {
        "name": "retrieve_profile",
        "args": [
          {
            "type": "uint64",
            "name": "user_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "string"
        },
        "desc": "Returns the profile data for a given user ID, allowing validators to view profiles."
      },
      {
        "name": "penalty_validator",
        "args": [
          {
            "type": "account",
            "name": "validator"
          },
          {
            "type": "uint64",
            "name": "penalty_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Imposes a penalty on a validator for inaccurate verification."
      },
      {
        "name": "adjust_validator_reward",
        "args": [
          {
            "type": "account",
            "name": "validator"
          },
          {
            "type": "uint64",
            "name": "reward_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Increases a validator's reward by the specified reward amount."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the DecentPassSmartContract smart contract.
 */
export type DecentPassSmartContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register_user(uint64,string)void' | 'register_user', {
      argsObj: {
        userId: bigint | number
        profileData: string
      }
      argsTuple: [userId: bigint | number, profileData: string]
      returns: void
    }>
    & Record<'assign_validator(account,uint64)void' | 'assign_validator', {
      argsObj: {
        validator: string | Uint8Array
        stakeAmount: bigint | number
      }
      argsTuple: [validator: string | Uint8Array, stakeAmount: bigint | number]
      returns: void
    }>
    & Record<'verify_user(uint64,account)void' | 'verify_user', {
      argsObj: {
        userId: bigint | number
        validator: string | Uint8Array
      }
      argsTuple: [userId: bigint | number, validator: string | Uint8Array]
      returns: void
    }>
    & Record<'claim_stake(account)void' | 'claim_stake', {
      argsObj: {
        validator: string | Uint8Array
      }
      argsTuple: [validator: string | Uint8Array]
      returns: void
    }>
    & Record<'retrieve_profile(uint64)string' | 'retrieve_profile', {
      argsObj: {
        userId: bigint | number
      }
      argsTuple: [userId: bigint | number]
      returns: string
    }>
    & Record<'penalty_validator(account,uint64)void' | 'penalty_validator', {
      argsObj: {
        validator: string | Uint8Array
        penaltyAmount: bigint | number
      }
      argsTuple: [validator: string | Uint8Array, penaltyAmount: bigint | number]
      returns: void
    }>
    & Record<'adjust_validator_reward(account,uint64)void' | 'adjust_validator_reward', {
      argsObj: {
        validator: string | Uint8Array
        rewardAmount: bigint | number
      }
      argsTuple: [validator: string | Uint8Array, rewardAmount: bigint | number]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type DecentPassSmartContractSig = keyof DecentPassSmartContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DecentPassSmartContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DecentPassSmartContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DecentPassSmartContractSig> = DecentPassSmartContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DecentPassSmartContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DecentPassSmartContractSig> = DecentPassSmartContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DecentPassSmartContractCreateCalls = (typeof DecentPassSmartContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DecentPassSmartContractCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DecentPassSmartContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DecentPassSmartContractCreateCalls) => DecentPassSmartContractCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DecentPassSmartContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DecentPassSmartContract smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the register_user(uint64,string)void ABI method
   *
   * Registers a user profile by storing their user ID and profile data in a BoxMap.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerUser(args: MethodArgs<'register_user(uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_user(uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userId, args.profileData],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assign_validator(account,uint64)void ABI method
   *
   * Allows a validator to stake tokens and participate in the verification process.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assignValidator(args: MethodArgs<'assign_validator(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assign_validator(account,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validator, args.stakeAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the verify_user(uint64,account)void ABI method
   *
   * Allows a validator to verify a user profile. Increases the validator's rewards or penalties
based on the accuracy of verification, to be handled later.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyUser(args: MethodArgs<'verify_user(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'verify_user(uint64,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userId, args.validator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_stake(account)void ABI method
   *
   * Allows a validator to claim their stake along with accumulated rewards minus penalties.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimStake(args: MethodArgs<'claim_stake(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_stake(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the retrieve_profile(uint64)string ABI method
   *
   * Returns the profile data for a given user ID, allowing validators to view profiles.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static retrieveProfile(args: MethodArgs<'retrieve_profile(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'retrieve_profile(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.userId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the penalty_validator(account,uint64)void ABI method
   *
   * Imposes a penalty on a validator for inaccurate verification.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static penaltyValidator(args: MethodArgs<'penalty_validator(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'penalty_validator(account,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validator, args.penaltyAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the adjust_validator_reward(account,uint64)void ABI method
   *
   * Increases a validator's reward by the specified reward amount.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adjustValidatorReward(args: MethodArgs<'adjust_validator_reward(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'adjust_validator_reward(account,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validator, args.rewardAmount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DecentPassSmartContract smart contract
 */
export class DecentPassSmartContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DecentPassSmartContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DecentPassSmartContract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DecentPassSmartContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DecentPassSmartContractDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DecentPassSmartContractCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DecentPassSmartContract smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DecentPassSmartContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the register_user(uint64,string)void ABI method.
   *
   * Registers a user profile by storing their user ID and profile data in a BoxMap.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerUser(args: MethodArgs<'register_user(uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.registerUser(args, params))
  }

  /**
   * Calls the assign_validator(account,uint64)void ABI method.
   *
   * Allows a validator to stake tokens and participate in the verification process.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assignValidator(args: MethodArgs<'assign_validator(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.assignValidator(args, params))
  }

  /**
   * Calls the verify_user(uint64,account)void ABI method.
   *
   * Allows a validator to verify a user profile. Increases the validator's rewards or penalties
based on the accuracy of verification, to be handled later.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyUser(args: MethodArgs<'verify_user(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.verifyUser(args, params))
  }

  /**
   * Calls the claim_stake(account)void ABI method.
   *
   * Allows a validator to claim their stake along with accumulated rewards minus penalties.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimStake(args: MethodArgs<'claim_stake(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.claimStake(args, params))
  }

  /**
   * Calls the retrieve_profile(uint64)string ABI method.
   *
   * Returns the profile data for a given user ID, allowing validators to view profiles.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public retrieveProfile(args: MethodArgs<'retrieve_profile(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.retrieveProfile(args, params))
  }

  /**
   * Calls the penalty_validator(account,uint64)void ABI method.
   *
   * Imposes a penalty on a validator for inaccurate verification.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public penaltyValidator(args: MethodArgs<'penalty_validator(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.penaltyValidator(args, params))
  }

  /**
   * Calls the adjust_validator_reward(account,uint64)void ABI method.
   *
   * Increases a validator's reward by the specified reward amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adjustValidatorReward(args: MethodArgs<'adjust_validator_reward(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DecentPassSmartContractCallFactory.adjustValidatorReward(args, params))
  }

  public compose(): DecentPassSmartContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      registerUser(args: MethodArgs<'register_user(uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerUser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assignValidator(args: MethodArgs<'assign_validator(account,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assignValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      verifyUser(args: MethodArgs<'verify_user(uint64,account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.verifyUser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimStake(args: MethodArgs<'claim_stake(account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      retrieveProfile(args: MethodArgs<'retrieve_profile(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.retrieveProfile(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      penaltyValidator(args: MethodArgs<'penalty_validator(account,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.penaltyValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adjustValidatorReward(args: MethodArgs<'adjust_validator_reward(account,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adjustValidatorReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DecentPassSmartContractComposer
  }
}
export type DecentPassSmartContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register_user(uint64,string)void ABI method.
   *
   * Registers a user profile by storing their user ID and profile data in a BoxMap.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerUser(args: MethodArgs<'register_user(uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'register_user(uint64,string)void'>]>

  /**
   * Calls the assign_validator(account,uint64)void ABI method.
   *
   * Allows a validator to stake tokens and participate in the verification process.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignValidator(args: MethodArgs<'assign_validator(account,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'assign_validator(account,uint64)void'>]>

  /**
   * Calls the verify_user(uint64,account)void ABI method.
   *
   * Allows a validator to verify a user profile. Increases the validator's rewards or penalties
based on the accuracy of verification, to be handled later.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyUser(args: MethodArgs<'verify_user(uint64,account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'verify_user(uint64,account)void'>]>

  /**
   * Calls the claim_stake(account)void ABI method.
   *
   * Allows a validator to claim their stake along with accumulated rewards minus penalties.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimStake(args: MethodArgs<'claim_stake(account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'claim_stake(account)void'>]>

  /**
   * Calls the retrieve_profile(uint64)string ABI method.
   *
   * Returns the profile data for a given user ID, allowing validators to view profiles.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  retrieveProfile(args: MethodArgs<'retrieve_profile(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'retrieve_profile(uint64)string'>]>

  /**
   * Calls the penalty_validator(account,uint64)void ABI method.
   *
   * Imposes a penalty on a validator for inaccurate verification.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  penaltyValidator(args: MethodArgs<'penalty_validator(account,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'penalty_validator(account,uint64)void'>]>

  /**
   * Calls the adjust_validator_reward(account,uint64)void ABI method.
   *
   * Increases a validator's reward by the specified reward amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adjustValidatorReward(args: MethodArgs<'adjust_validator_reward(account,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, MethodReturn<'adjust_validator_reward(account,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the DecentPassSmartContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DecentPassSmartContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DecentPassSmartContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DecentPassSmartContractComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DecentPassSmartContractComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DecentPassSmartContractComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DecentPassSmartContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
